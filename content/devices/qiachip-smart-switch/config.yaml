substitutions:
  device_name: qiachip_test
  friendly_name: QIACHIP Test

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    then:
      - uart.write:
          [
            0x3C,
            0x59,
            0x97,
            0x8E,
            0x03,
            0xFE,
            0x19,
            0x82,
            0x9A,
            0x87,
            0x0C,
            0x87,
            0x16,
            0x87,
            0x82,
            0x86,
            0x7E,
            0x04,
            0x87,
            0x1E,
            0x87,
            0x8E,
            0x86,
            0x3E,
            0x1A,
            0x16,
            0x16,
            0x94,
            0x16,
            0x16,
            0x8F,
            0x87,
            0x02,
            0x4C,
            0x12,
            0x50,
            0x88,
            0x8E,
            0x87,
            0x15,
            0x3A,
            0x86,
            0x82,
            0xFE,
            0x8F,
            0x16,
            0x0F,
            0x07,
            0x09,
            0x9B,
            0xFE,
            0x96,
            0x8B,
            0x96,
            0x1B,
            0x08,
            0x87,
            0x07,
            0x96,
            0x82,
            0xC6,
            0xD5,
            0x0A,
            0xD2,
            0x82,
            0x92,
            0x0E,
            0xFF,
          ]
  includes:
    - qiachip-uart.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on #we only have one WiFi AP so just use the first one that matches
  ap: #since we listed an SSID above, this AP mode will only enable if no WiFi connection could be made
    ssid: ${friendly_name}_AP
    password: !secret wifi_password

logger:
  hardware_uart: UART1 # move logging to UART 1 since RF module is on UART 0
#  baud_rate: 0 #disable UART logging

# Enable Home Assistant API
api:

# Enable OTA updates
ota:
  safe_mode: True

# Enable web server
web_server:
  port: 80

uart:
  baud_rate: 9600
  tx_pin: GPIO1
  rx_pin: GPIO3

#status_led:
#  pin:
#    number: GPIO04
#    inverted: true

binary_sensor:
  - platform: custom
    lambda: |-
      auto qiachip_uart = new QiachipUART();
      App.register_component(qiachip_uart);
      return {qiachip_uart};

    binary_sensors:
      name: "RFModule"
      on_press:
        switch.turn_on: relay
      on_release:
        switch.turn_off: relay
      internal: true

switch:
  - platform: gpio
    name: "${friendly_name}"
    id: "relay"

    pin: GPIO4 # using ESP module LED
    inverted: true
    on_turn_on:
      - uart.write: [0xAC, 0x28, 0x00, 0x21]
    on_turn_off:
      - uart.write: [0xAC, 0x20, 0x00, 0x29]

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    then:
      - uart.write:
          [
            0x3C,
            0x59,
            0x97,
            0x8E,
            0x03,
            0xFE,
            0x19,
            0x82,
            0x9A,
            0x87,
            0x0C,
            0x87,
            0x16,
            0x87,
            0x82,
            0x86,
            0x7E,
            0x04,
            0x87,
            0x1E,
            0x87,
            0x8E,
            0x86,
            0x3E,
            0x1A,
            0x16,
            0x16,
            0x94,
            0x16,
            0x16,
            0x8F,
            0x87,
            0x02,
            0x4C,
            0x12,
            0x50,
            0x88,
            0x8E,
            0x87,
            0x15,
            0x3A,
            0x86,
            0x82,
            0xFE,
            0x8F,
            0x16,
            0x0F,
            0x07,
            0x09,
            0x9B,
            0xFE,
            0x96,
            0x8B,
            0x96,
            0x1B,
            0x08,
            0x87,
            0x07,
            0x96,
            0x82,
            0xC6,
            0xD5,
            0x0A,
            0xD2,
            0x82,
            0x92,
            0x0E,
            0xFF,
          ]
  includes:
    - qiachip-uart.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on #we only have one WiFi AP so just use the first one that matches
  ap: #since we listed an SSID above, this AP mode will only enable if no WiFi connection could be made
    ssid: ${friendly_name}_AP
    password: !secret wifi_password

logger:
  hardware_uart: UART1 # move logging to UART 1 since RF module is on UART 0
#  baud_rate: 0 #disable UART logging

# Enable Home Assistant API
api:

# Enable OTA updates
ota:
  safe_mode: True

# Enable web server
web_server:
  port: 80

uart:
  baud_rate: 9600
  tx_pin: GPIO1
  rx_pin: GPIO3

#status_led:
#  pin:
#    number: GPIO04
#    inverted: true

binary_sensor:
  - platform: custom
    lambda: |-
      auto qiachip_uart = new QiachipUART();
      App.register_component(qiachip_uart);
      return {qiachip_uart};

    binary_sensors:
      name: "RFModule"
      on_press:
        switch.turn_on: relay
      on_release:
        switch.turn_off: relay
      internal: true

switch:
  - platform: gpio
    name: "${friendly_name}"
    id: "relay"

    pin: GPIO4 # using ESP module LED
    inverted: true
    on_turn_on:
      - uart.write: [0xAC, 0x28, 0x00, 0x21]
    on_turn_off:
      - uart.write: [0xAC, 0x20, 0x00, 0x29]

substitutions:
  device_name: qiachip
  friendly_name: QIACHIP Relay

<<: !include qiachip-common.yaml